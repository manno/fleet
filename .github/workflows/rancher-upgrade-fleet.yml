# Upgrade Fleet in given Rancher versions to given Fleet release and run tests
name: Upgrade Fleet in Rancher

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Checkout git branch/tag"
        required: true
        default: "main"
      k3s_version:
        # https://hub.docker.com/r/rancher/k3s/tags
        # k3d version list k3s | sed 's/+/-/' | sort -h
        description: "K3s version to use"
        required: true
        default: "v1.27.9-k3s1"
      rancher_version:
        description: "Rancher version to install"
        required: true
        default: "2.8.2"
      fleet_crd_url:
        description: "Fleet CRD chart URL from rancher/charts"
        required: true
        default: https://github.com/rancher/charts/raw/dev-v2.8/assets/fleet-crd/fleet-crd-103.1.1+up0.9.1-rc.6.tgz
      fleet_url:
        description: "Fleet chart URL from rancher/charts"
        required: true
        default: https://github.com/rancher/charts/raw/dev-v2.8/assets/fleet/fleet-103.1.1+up0.9.1-rc.6.tgz
      image_repo:
        description: "Fleet image repo"
        required: true
        default: "rancher/fleet"
      image_tag:
        description: "Fleet image tag"
        required: true
        default: "v0.9.1-rc.6"

env:
  GOARCH: amd64
  CGO_ENABLED: 0
  SETUP_K3D_VERSION: 'v5.5.1'

jobs:
  rancher-fleet-upgrade:
    runs-on: ubuntu-latest

    steps:
      -
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.ref }}
      -
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true
      -
        name: Install Ginkgo CLI
        run: go install github.com/onsi/ginkgo/v2/ginkgo
      -
        uses: actions/cache@v4
        id: rancher-cli-cache
        with:
          path: /home/runner/.local/bin
          key: ${{ runner.os }}-rancher-cli-2.6.0
      -
        name: Install Rancher CLI
        if: steps.rancher-cli-cache.outputs.cache-hit != 'true'
        run: |
          # download an older CLI to avoid https://github.com/rancher/rancher/issues/37574
          mkdir -p /home/runner/.local/bin
          wget -q https://github.com/rancher/cli/releases/download/v2.6.0/rancher-linux-amd64-v2.6.0.tar.gz
          tar -xz --strip-components=2 -f rancher-linux-amd64-v2.6.0.tar.gz -C /home/runner/.local/bin
          rancher --version
      -
        name: Set up k3d control-plane cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          k3d-version: ${{ env.SETUP_K3D_VERSION }}
          cluster-name: "upstream"
          args: >-
            -p "80:80@agent:0:direct"
            -p "443:443@agent:0:direct"
            --api-port 6443
            --agents 1
            --k3s-arg '--kubelet-arg=eviction-hard=imagefs.available<1%,nodefs.available<1%@agent:*'
            --k3s-arg '--kubelet-arg=eviction-minimum-reclaim=imagefs.available=1%,nodefs.available=1%@agent:*'
            --network "nw01"
            --image docker.io/rancher/k3s:${{github.event.inputs.k3s_version}}
      -
        name: Set up k3d downstream cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          k3d-version: ${{ env.SETUP_K3D_VERSION }}
          cluster-name: "downstream"
          args: >-
            -p "81:80@agent:0:direct"
            -p "444:443@agent:0:direct"
            --api-port 6644
            --agents 1
            --k3s-arg '--kubelet-arg=eviction-hard=imagefs.available<1%,nodefs.available<1%@agent:*'
            --k3s-arg '--kubelet-arg=eviction-minimum-reclaim=imagefs.available=1%,nodefs.available=1%@agent:*'
            --network "nw01"
            --image docker.io/rancher/k3s:${{github.event.inputs.k3s_version}}
      -
        name: Set up Rancher
        env:
          public_hostname: "172.18.0.1.omg.howdoi.website"
          fleetns: "cattle-fleet-system"
        run: |
          ./.github/scripts/setup-rancher.sh "${{github.event.inputs.rancher_version}}"
          ./.github/scripts/wait-for-loadbalancer.sh
          ./.github/scripts/register-downstream-clusters.sh
          ./.github/scripts/label-downstream-cluster.sh
      -
        name: Create example workload
        run: |
          kubectl apply -n fleet-local -f e2e/assets/fleet-upgrade/gitrepo-simple.yaml
          kubectl apply -n fleet-default -f e2e/assets/fleet-upgrade/gitrepo-simple.yaml
      -
        name: Deploy latest fleet
        env:
          url_crd: ${{github.event.inputs.fleet_crd_version}}
          url: ${{github.event.inputs.fleet_version}}
          image_repo: ${{github.event.inputs.image_repo}}
          image_tag: ${{github.event.inputs.image_tag}}
          fleetns: "cattle-fleet-system"
        run: |
          helm upgrade fleet-crd "$url_crd" --wait -n "$fleetns"
          until helm -n "$fleetns" status fleet-crd  | grep -q "STATUS: deployed"; do echo waiting for original fleet-crd chart to be deployed; sleep 1; done

          helm upgrade fleet "$url" \
            --wait -n "$fleetns" \
            --reuse-values \
            --set image.repository="$image_repo" \
            --set image.tag="$image_tag" \
            --set agentImage.repository="$image_repo" \
            --set agentImage.tag="$image_tag"
          until helm -n "$fleetns" status fleet | grep -q "STATUS: deployed"; do echo waiting for original fleet chart to be deployed; sleep 3; done
          kubectl -n "$fleetns" rollout status deploy/fleet-controller

          # wait for bundle update
          until kubectl get bundles -n fleet-local fleet-agent-local -ojsonpath='{.spec.resources}' | grep -q "image: rancher/fleet-agent:$version"; do sleep 3; done
          until kubectl get bundles -n fleet-default -ojsonpath='{.items[*].spec.resources}' | grep -q "image: rancher/fleet-agent:$version"; do sleep 3; done

          # wait for fleet agent bundles
          { grep -E -q -m 1 "fleet-agent-local.*1/1"; kill $!; } < <(kubectl get bundles -n fleet-local -w)
          { grep -E -q -m 1 "fleet-agent-c.*1/1"; kill $!; } < <(kubectl get bundles -n fleet-default -w)
      -
        name: Verify Installation
        env:
          FLEET_E2E_NS: fleet-local
          FLEET_VERSION: v${{matrix.fleet_version}}
          FLEET_LOCAL_AGENT_NAMESPACE: "cattle-fleet-local-system"
          FLEET_AGENT_NAMESPACE: "cattle-fleet-system"
        run: |
          ginkgo --label-filter="!single-cluster" e2e/installation
      -
        name: E2E tests for examples
        env:
          FLEET_E2E_NS: fleet-local
          FLEET_E2E_NS_DOWNSTREAM: fleet-local
        run: |
          ginkgo e2e/multi-cluster
      -
        name: Dump failed environment
        if: failure()
        run: |
          ./.github/scripts/dump-failed-k3ds.sh
      -
        name: Upload logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: gha-fleet-upgrade-rancher-logs-${{ github.event.inputs.rancher_version }}-${{ github.event.inputs.k3s_version }}-${{ github.sha }}-${{ github.run_id }}
          path: |
            tmp/*.json
            tmp/*.log
          retention-days: 2
