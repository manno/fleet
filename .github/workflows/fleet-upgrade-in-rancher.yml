# Upgrade fleet in specific Rancher versions to latest fleet release and run MC tests
name: Upgrade Fleet in Rancher

on:
  schedule:
    # Run everyday day at 1:00 PM
    - cron:  '0 13 */2 * *'
  workflow_dispatch:
    inputs:
      ref:
        description: "checkout git branch/tag"
        required: true
        default: "master"
      enable_tmate:
        description: 'Enable debugging via tmate'
        required: false
        default: "false"
  push:
    tags: [ 'v*' ]

env:
  GOARCH: amd64
  CGO_ENABLED: 0
  SETUP_GO_VERSION: '^1.19'

jobs:
  rancher-fleet-upgrade:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        k3s_version:
          # k3d version list k3s | sed 's/+/-/' | sort -h
          # https://hub.docker.com/r/rancher/k3s/tags
          - v1.24.1-k3s1
          #- v1.20.15-k3s1
        rancher_version:
          #- v2.5.16 # k3s: 1.19-1.20
          - v2.6.9 # k3s: 1.20-1.24
          - v2.7.0 # k3s: 1.23-1.24
        fleet_version:
         - v0.6.0-alpha4

    steps:
      -
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.ref }}
      -
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.SETUP_GO_VERSION }}
      -
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Install Ginkgo CLI
        run: go install github.com/onsi/ginkgo/v2/ginkgo@v2.1
      -
        uses: actions/cache@v3
        id: rancher-cli-cache
        with:
          path: /home/runner/.local/bin
          key: ${{ runner.os }}-rancher-cli-2.6.0
      -
        name: Install Rancher CLI
        if: steps.rancher-cli-cache.outputs.cache-hit != 'true'
        run: |
          # download an older CLI to avoid https://github.com/rancher/rancher/issues/37574
          mkdir -p /home/runner/.local/bin
          wget -q https://github.com/rancher/cli/releases/download/v2.6.0/rancher-linux-amd64-v2.6.0.tar.gz
          tar -xz --strip-components=2 -f rancher-linux-amd64-v2.6.0.tar.gz -C /home/runner/.local/bin
          rancher --version
      -
        name: Set up k3d control-plane cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "upstream"
          args: >-
            -p "80:80@agent:0:direct"
            -p "443:443@agent:0:direct"
            --api-port 6443
            --agents 1
            --k3s-arg '--kubelet-arg=eviction-hard=imagefs.available<1%,nodefs.available<1%@agent:*'
            --k3s-arg '--kubelet-arg=eviction-minimum-reclaim=imagefs.available=1%,nodefs.available=1%@agent:*'
            --network "nw01"
            --image docker.io/rancher/k3s:${{matrix.k3s_version}}
      -
        name: Set up k3d downstream cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "downstream"
          args: >-
            -p "81:80@agent:0:direct"
            -p "444:443@agent:0:direct"
            --api-port 6644
            --agents 1
            --k3s-arg '--kubelet-arg=eviction-hard=imagefs.available<1%,nodefs.available<1%@agent:*'
            --k3s-arg '--kubelet-arg=eviction-minimum-reclaim=imagefs.available=1%,nodefs.available=1%@agent:*'
            --network "nw01"
            --image docker.io/rancher/k3s:${{matrix.k3s_version}}
      -
        name: Set up tmate debug session
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.enable_tmate == 'true' }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15
        with:
          limit-access-to-actor: true
      -
        name: Set up Rancher
        env:
          url: "172.18.0.1.omg.howdoi.website"
        run: |
          ./.github/scripts/setup-rancher.sh "${{matrix.rancher_version}}"
          ./.github/scripts/wait-for-loadbalancer.sh
          ./.github/scripts/register-downstream-clusters.sh
          ./.github/scripts/label-downstream-cluster.sh
      -
        name: Create example workload
        run: |
          kubectl apply -n fleet-local -f e2e/assets/bundle-diffs/gitrepo.yaml
      -
        name: Deploy latest fleet
        env:
          url_crd: "https://github.com/rancher/fleet/releases/download/v0.4.1/fleet-crd-0.4.1.tgz"
          url: "https://github.com/rancher/fleet/releases/download/v0.4.1/fleet-0.4.1.tgz"
          version: ${{matrix.fleet_version}}
        run: |
          helm upgrade fleet-crd "$url_crd" --wait -n cattle-fleet-system
          until helm -n cattle-fleet-system status fleet | grep -q "STATUS: deployed"; do echo waiting for original fleet chart to be deployed; sleep 3; done

          helm upgrade fleet "$url" \
            --wait -n cattle-fleet-system \
            --set image.tag="$version" \
            --set agentImage.tag="$version" \
            --reuse-values
          kubectl -n cattle-fleet-system rollout status deploy/fleet-controller

          # wait for fleet agent bundle for downstream cluster
          { grep -E -q -m 1 "fleet-agent-c.*1/1"; kill $!; } < <(kubectl get bundles -n fleet-default -w)
      -
        name: Verify Installation
        env:
          FLEET_E2E_NS: fleet-local
        run: |
          ginkgo e2e/installation
      -
        name: E2E tests for examples
        env:
          FLEET_E2E_CLUSTER: k3d-upstream
          FLEET_E2E_CLUSTER_DOWNSTREAM: k3d-downstream
        run: |
          kubectl config use-context k3d-upstream
          ginkgo e2e/multi-cluster
      -
        name: Dump failed environment
        if: failure()
        run: |
          ./.github/scripts/dump-failed-k3ds.sh
      -
        name: Upload logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: gha-fleet-rancher-logs-${{ github.sha }}-${{ github.run_id }}
          path: |
            tmp/*.json
            tmp/*.log
          retention-days: 2
